{
	"info": {
		"_postman_id": "486a046a-6334-42d2-8dc0-b1b2629cf31e",
		"name": "Test Explore With Me - Comment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5731293"
	},
	"item": [
		{
			"name": "User 64 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 64').to.eql(64);\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"autor@user.com\"').to.eql('autor@user.com');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"autor\"').to.eql('autor');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"autor\",\r\n    \"email\": \"autor@user.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 65 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 65').to.eql(65);\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"organizer@user.com\"').to.eql('organizer@user.com');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"organizer\"').to.eql('organizer');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"organizer\",\r\n    \"email\": \"organizer@user.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User 66 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has user create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test user 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 66').to.eql(66);\r",
							"});\r",
							"pm.test(\"Test user 'email' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData.email, '\"email\" must be \"autor2@user.com\"').to.eql('autor2@user.com');\r",
							"});\r",
							"pm.test(\"Test user 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"autor2\"').to.eql('autor2');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"autor2\",\r\n    \"email\": \"autor2@user.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category 56 create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has сategory  create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test сategory 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 56').to.eql(56);\r",
							"});\r",
							"pm.test(\"Test сategory 'name' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData.name, '\"name\" must be \"Выставки\"').to.eql('Выставки');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Выставки\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 39 create by user 65",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has event  create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 39').to.eql(39);\r",
							"});\r",
							"pm.test(\"Test event 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"Панк-культура. Король и Шут\"').to.eql('Панк-культура. Король и Шут');\r",
							"});\r",
							"pm.test(\"Test event 'annotation' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('annotation');\r",
							"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе\"').to.eql('Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе');\r",
							"});\r",
							"pm.test(\"Test event 'initiator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('initiator');\r",
							"    pm.expect(jsonData.initiator.id, '\"initiator id\" must be \"65\"').to.eql(65);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"var eventDate = moment().add(1, 'd');\r",
							"pm.environment.set('eventDate', eventDate.format('YYYY-MM-DD HH:mm:ss'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе\",\r\n    \"category\": 56,\r\n    \"description\": \"Первый зал. В нём вам докажут, что панк — не просто громкая музыка, а целый культурный феномен. Здесь панк-мода в костюмах и футболках, воссозданные культовые заведения, плакаты, инсталляции и видео. Путешествуйте из легендарного нью-йоркского клуба CBGB и лондонского магазина SEX в монументальные советские ДК и дальше — на большие площадки настоящего. В этом зале вы увидите винтажные вещи иконы панк-стиля Вивьен Вествуд, арт-объекты английского художника Джейми Рида, создавшего визуальный стиль Sex Pistols, и воссозданную домашнюю студию Егора Летова. Второй зал.Путешествие в мир «Короля и Шута»: в декорациях замка, таверны, леса и кладбища вы узнаете о бесшабашных выступлениях в клубе Tamtam и главных альбомах группы, попадёте в полный Олимпийский и найдёте свидетельства народной славы, исследуете тайные смыслы текстов песен и заглянете на съемочную площадку сериала по мотивам истории группы. Здесь представлены сценические костюмы музыкантов, рукописи песен, редкие кассеты и диски, афиши и декорации сериала.\",\r\n    \"eventDate\": \"{{eventDate}}\",\r\n    \"location\": {\r\n        \"lat\": 27.2319,\r\n        \"lon\": -123.0255\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Панк-культура. Король и Шут\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "65"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create with pending event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Event 1 publish",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has event create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test event 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 39').to.eql(39);\r",
							"});\r",
							"pm.test(\"Test event 'title' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData.title, '\"title\" must be \"Панк-культура. Король и Шут\"').to.eql('Панк-культура. Король и Шут');\r",
							"});\r",
							"pm.test(\"Test event 'annotation' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('annotation');\r",
							"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе\"').to.eql('Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе');\r",
							"});\r",
							"pm.test(\"Test event 'initiator' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('initiator');\r",
							"    pm.expect(jsonData.initiator.id, '\"initiator id\" must be \"65\"').to.eql(65);\r",
							"});\r",
							"pm.test(\"Test event 'state' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('state');\r",
							"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"var eventDate = moment().add(1, 'd');\r",
							"pm.environment.set('eventDate', eventDate.format('YYYY-MM-DD HH:mm:ss'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Будьте как дома, панки! А ещё любители, интересующиеся, выросшие из этого и так далее — здесь рады всем. Это та самая выставка, где информационный дисплей оказался в писсуаре, телефонная будка на боку, а панк повсюду — на стенах, потолках, лестницах и просто в воздухе\",\r\n    \"category\": 56,\r\n    \"description\": \"Первый зал. В нём вам докажут, что панк — не просто громкая музыка, а целый культурный феномен. Здесь панк-мода в костюмах и футболках, воссозданные культовые заведения, плакаты, инсталляции и видео. Путешествуйте из легендарного нью-йоркского клуба CBGB и лондонского магазина SEX в монументальные советские ДК и дальше — на большие площадки настоящего. В этом зале вы увидите винтажные вещи иконы панк-стиля Вивьен Вествуд, арт-объекты английского художника Джейми Рида, создавшего визуальный стиль Sex Pistols, и воссозданную домашнюю студию Егора Летова. Второй зал.Путешествие в мир «Короля и Шута»: в декорациях замка, таверны, леса и кладбища вы узнаете о бесшабашных выступлениях в клубе Tamtam и главных альбомах группы, попадёте в полный Олимпийский и найдёте свидетельства народной славы, исследуете тайные смыслы текстов песен и заглянете на съемочную площадку сериала по мотивам истории группы. Здесь представлены сценические костюмы музыкантов, рукописи песен, редкие кассеты и диски, афиши и декорации сериала.\",\r\n    \"eventDate\": \"{{eventDate}}\",\r\n    \"location\": {\r\n        \"lat\": 27.2319,\r\n        \"lon\": -123.0255\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": false,\r\n    \"title\": \"Панк-культура. Король и Шут\",\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 create by user 64",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\"').to.eql('Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'author' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData.author.id, '\"author id\" must be \"64\"').to.eql(64);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 2 create by user 65 (organizer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"Безумно Крутая выставка !!! Рекомендую сходить !!! Дружелюбный персонал !!! После похода только положительные эмоции.\"').to.eql('Безумно Крутая выставка !!! Рекомендую сходить !!! Дружелюбный персонал !!! После похода только положительные эмоции.');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'organizer' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('organizer');\r",
							"    pm.expect(jsonData.organizer, '\"organizer\" must be \"true\"').to.eql(true);\r",
							"});\r",
							"pm.test(\"Test comment 'displayName' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('displayName');\r",
							"    pm.expect(jsonData.displayName, '\"displayName\" must be \"Панк-культура. Король и Шут\"').to.eql(\"Панк-культура. Король и Шут\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Безумно Крутая выставка !!! Рекомендую сходить !!! Дружелюбный персонал !!! После похода только положительные эмоции.\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "65"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 3 create by user 66",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"очень интересная выставка!\"').to.eql('очень интересная выставка!');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'author' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData.author.id, '\"author id\" must be \"66\"').to.eql(66);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"очень интересная выставка!\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "66"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 3 update by user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"очень интересная выставка...надеюсь\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "commentId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 3 update by user 66",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"очень интересная выставка...надеюсь\"').to.eql('очень интересная выставка...надеюсь');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'author' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData.author.id, '\"author id\" must be \"66\"').to.eql(66);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"очень интересная выставка...надеюсь\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "66"
						},
						{
							"key": "commentId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comments get all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comment response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment[0] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, '\"text\" must be \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\"').to.eql('Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.');\r",
							"});\r",
							"pm.test(\"Test comment[1] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
							"});\r",
							"pm.test(\"Test comment[1] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1].text, '\"text\" must be \"Безумно Крутая выставка !!! Рекомендую сходить !!! Дружелюбный персонал !!! После похода только положительные эмоции.\"').to.eql('Безумно Крутая выставка !!! Рекомендую сходить !!! Дружелюбный персонал !!! После похода только положительные эмоции.');\r",
							"});\r",
							"pm.test(\"Test comment[2] 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[2]).to.have.property('id');\r",
							"    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
							"});\r",
							"pm.test(\"Test comment[2] 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[2]).to.have.property('text');\r",
							"    pm.expect(jsonData[2].text, '\"text\" must be \"очень интересная выставка...надеюсь\"').to.eql('очень интересная выставка...надеюсь');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments?from=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 update by user 64",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test comment 'id' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
							"});\r",
							"pm.test(\"Test comment 'text' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('text');\r",
							"    pm.expect(jsonData.text, '\"text\" must be \"сорри, я тут расписал всякого. Не моё, но и ничего плохого не вижу, в общем\"').to.eql('сорри, я тут расписал всякого. Не моё, но и ничего плохого не вижу, в общем');\r",
							"});\r",
							"\r",
							"pm.test(\"Test comment 'author' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('author');\r",
							"    pm.expect(jsonData.author.id, '\"author id\" must be \"64\"').to.eql(64);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"сорри, я тут расписал всякого. Не моё, но и ничего плохого не вижу, в общем\",\r\n    \"event\": 39\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment get non found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "555"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Has comment create response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Test get comment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.event.id, '\"event id\" field').to.eql(39);\r",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql('сорри, я тут расписал всякого. Не моё, но и ничего плохого не вижу, в общем');\r",
							"    pm.expect(jsonData.displayName, '\"displayName\" field').to.eql('autor');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create with not found user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\",\r\n    \"event\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "555"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment create with not found event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Я удивленно читаю восторженные описание… Не понимаю общего восхищения. Мне вообще не показалось это выставкой . Смесь ютуба , Википедии и Питерского кастлрока. Не было даже намёка на атмосферу панк рок. Такое впечатление , что организаторов интересуют исключительно деньги , а не содержимое . Выставка попсовая и пластиковая.\",\r\n    \"event\": 555\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment 1 delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Comments get all for event 39 after delete comment 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test list comment response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments?eventId=39",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}